<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xmlns:camel-cxf="http://camel.apache.org/schema/cxf"
       xmlns:osgi="http://www.springframework.org/schema/osgi"
       xmlns:osgix="http://www.springframework.org/schema/osgi-compendium"
       xsi:schemaLocation="
          http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
          http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		  http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
          http://www.springframework.org/schema/osgi
  		  http://www.springframework.org/schema/osgi/spring-osgi.xsd
  		  http://www.springframework.org/schema/osgi-compendium http://www.springframework.org/schema/osgi-compendium/spring-osgi-compendium.xsd">

  <import resource="classpath*:/META-INF/spring/common.xml" />

  <osgix:cm-properties id="properties" persistent-id="org.jboss.fuse.examples.orgNameSearch">
    <prop key="http.port">8181</prop>
    <prop key="http.contextPath">/orgNameSearch/rest</prop>
	<prop key="countryNameLookupService.uri">http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso</prop>
  </osgix:cm-properties>

  <bean id="bridgePropertyPlaceholder" class="org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer">
    <property name="properties" ref="properties"/>
  </bean>

<!-- Swap-in Oracle instead of Derby during onsite workshop -->
<!-- 	        <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"> -->
<!-- 	            <property name="driverClassName" value="oracle.jdbc.OracleDriver"/> -->
<!-- 	            <property name="url" value="jdbc:oracle:thin:@//{{sample1b.jdbc.hostname}}:{{sample1b.jdbc.port}}/{{sample1b.jdbc.sid}}"/> -->
<!-- 	            <property name="username" value="{{sample1b.jdbc.username}}"/> -->
<!-- 	            <property name="password" value="{{sample1b.jdbc.password}}"/> -->
<!-- 	            <property name="maxIdle" value="3"/> -->
<!-- 	            <property name="maxActive" value="6"/> -->
<!-- 	        </bean> -->

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
  		<property name="driverClassName" value="org.apache.derby.jdbc.EmbeddedDriver"/>
  		<property name="url" value="jdbc:derby:memory:orders;create=true"/>
  		<property name="username" value=""/>
  		<property name="password" value=""/>
	</bean>

	<bean id="sql" class="org.apache.camel.component.sql.SqlComponent">
 		<property name="dataSource" ref="dataSource"/>
	</bean>

  <!-- bean which creates/destroys the database table for this example -->
  <bean id="initDatabase" class="org.jboss.fuse.examples.jdbc.DatabaseBean" init-method="create" destroy-method="destroy">
    <property name="dataSource" ref="dataSource"/>
  </bean>
  
	<bean id="countryResponseProcessor" class="org.jboss.fuse.examples.rest.CountryProcessor" />
  
<bean id="gZipInInterceptor" class="org.apache.cxf.transport.common.gzip.GZIPInInterceptor" />
<bean id="gZipOutInterceptor" class="org.apache.cxf.transport.common.gzip.GZIPOutInterceptor" />

    <camel-cxf:cxfEndpoint id="countryLookupClient"
                         address="${countryNameLookupService.uri}"
                         serviceClass="org.oorsprong.websamples_countryinfo.CountryInfoServiceSoapType">
		<camel-cxf:inInterceptors>
			<ref bean="gZipInInterceptor" />
		</camel-cxf:inInterceptors>
		<camel-cxf:outInterceptors>
			<ref bean="gZipOutInterceptor" />
		</camel-cxf:outInterceptors>
	</camel-cxf:cxfEndpoint>

  <camelContext id="orgNameSearchContext" xmlns="http://camel.apache.org/schema/spring">
    <routeContextRef ref="jmsUseCaseRoutes" />
    <routeContextRef ref="soapUseCaseRoutes" />

    <dataFormats>
      <json id="queryRequest" library="Jackson" unmarshalTypeName="org.jboss.fuse.examples.jms.OrganizationQueryRequest"/>
      <json id="organization" library="Jackson" unmarshalTypeName="org.jboss.fuse.examples.rest.Organization"/>
      <json id="organizationResponse" library="Jackson" unmarshalTypeName="org.jboss.fuse.examples.soap.OrganizationQueryResponse" useList="true"/>
    </dataFormats>

    <!-- configure rest to use the camel-servlet component, and use json binding mode -->
    <!-- and tell to output json in pretty print mode -->
    <!-- setup context path and port number that Apache Tomcat will deploy this application with,
         as we use the servlet component, then we need to aid Camel to tell it these details so Camel
         knows the url to the REST services.
         Notice: This is optional, but needed if the RestRegistry should enlist accurate information.
         You can access the RestRegistry from JMX at runtime -->

        <restConfiguration component="servlet" bindingMode="json">
      		<componentProperty key="contextPath" value="${http.contextPath}"/>
      		<componentProperty key="port" value="${http.port}"/>
      		<dataFormatProperty key="prettyPrint" value="true"/>
    	</restConfiguration>


    <!-- defines the rest services using the context-path /organization -->
    <rest path="/orgNameSearch" consumes="application/json" produces="application/json">
      <description>Organization rest service</description>

      <!-- this is a rest GET to view an organization by the given id -->
      <get uri="/{id}" outType="org.jboss.fuse.examples.rest.Organization">
        <description>Find organization by ord_id</description>
		<to uri="direct:orgById"/>
      </get>

	<!-- this is a rest GET to view paginated results using a partial organization name -->
	<get uri="/{partialOrgName}/{pageNumber}/{pageSize}" outType="org.jboss.fuse.examples.rest.Organization">
		<description>Find organization by partial organization name and then return paginated results</description>
		<to uri="direct:paginate" />
	</get>

      <!-- this is a rest PUT to create/update an Organization -->
      <put type="org.jboss.fuse.examples.rest.Organization">
        <description>Updates or create an organization</description>
		<to uri="direct:putOrganization"/>
      </put>

      <!-- this is a rest GET to find all organizations -->
      <get uri="/findAll" outType="org.jboss.fuse.examples.rest.Organization[]">
        <description>Find all organizations</description>
	  	<to uri="direct:findAll"/>
      </get>
    </rest>

    <!-- defines the rest service wrapper for a simple rest to soap proxy -->
    <rest path="/mapCountryName" consumes="application/json" produces="application/json">
      <description>Maps a country code to a country Name rest service</description>

      <!-- this is a rest GET to view an organization by the given id -->
      <get uri="/{countryCode}" outType="org.jboss.fuse.examples.rest.Country">
        <description>Find country name by country code</description>
		<to uri="direct:countryByCode"/>
      </get>

    </rest>

    <!-- defines the JMS rest services using the context-path /jms/organization -->
    <rest path="/jms/orgNameSearch" consumes="application/json" produces="application/json">
      <description>Organization JMS rest service</description>

      <!-- this is a rest GET to view an organization by the given id -->
      <get uri="/{id}" outType="org.jboss.fuse.examples.rest.Organization">
        <description>Find organization by ord_id</description>
		<to uri="direct:orgById"/>
      </get>

      	<!-- this is a rest GET to view paginated results using a partial organization name -->
		<get uri="/{partialOrgName}/{pageNumber}/{pageSize}" outType="org.jboss.fuse.examples.rest.Organization">
			<description>Find organization by partial organization name and then return paginated results</description>
			<to uri="direct:paginate" />
		</get>

      <!-- this is a rest PUT to create/update an Organization -->
      <put type="org.jboss.fuse.examples.rest.Organization">
        <description>Updates or create an organization</description>
		<to uri="direct:putOrganization"/>
      </put>

      <!-- this is a rest GET to find all organizations -->
      <get uri="/findAll" outType="org.jboss.fuse.examples.rest.Organization[]">
        <description>Find all organizations</description>
		<to uri="direct:findAll"/>
      </get>
    </rest>

    <route id="populateDB" startupOrder="1">
      	<from uri="file:src/data?noop=true"/>
      	<unmarshal>
      		<csv />
      	</unmarshal>
        <split>
        	<simple>${body}</simple>
			<to uri="sql:insert into ORGANIZATION (org_id, org_name) values (#,#)" />
		</split>
		<log message="Updated organization database."/>
    </route>

	<route id="putOrganization">
		<from uri="direct:putOrganization"/>
            <setHeader headerName="org_id">
                <simple>${body.org_id}</simple>
            </setHeader>
            <setHeader headerName="org_name">
                <simple>${body.org_name}</simple>
            </setHeader>
	        <to uri="sql:select org_id, org_name from organization where org_id=:#org_id"/>
	        <choice>
	        	<when>
	        		<simple>${header.CamelSqlRowCount} > 0</simple>
					<to uri="sql:update organization set org_name=:#org_name where org_id=:#org_id"/>
	        	</when>
	        	<otherwise>
	        		<to uri="sql:insert INTO organization (org_id, org_name) VALUES (:#org_id,:#org_name )"/>
	        	</otherwise>
	        </choice>
	        <to uri="sql:select org_id, org_name from organization where org_id=:#org_id"/>
		   	<setHeader headerName="node">
		    	<constant>1</constant>
		    </setHeader>
	</route>

	<route id="paginate">
		<from uri="direct:paginate"/>
		<setHeader headerName="partialOrgNameWildcard">
		  <simple>%${header.partialOrgName}%</simple>
		</setHeader>
		<to uri="sql:select org_id, org_name from organization where org_name like :#partialOrgNameWildcard offset :#pageNumber rows fetch first :#pageSize rows only" />
        <setHeader headerName="node">
        	<constant>1</constant>
        </setHeader>
	</route>

	  <route id="orgById">
	  		<from uri="direct:orgById"/>
	        <to uri="sql:select org_id, org_name from organization where org_id=:#id"/>
	        <setHeader headerName="node">
	        	<constant>1</constant>
	        </setHeader>
	  </route>

	  <route id="findAll">
	  		<from uri="direct:findAll"/>
        	<to uri="sql:select org_id, org_name from organization"/>
	        <setHeader headerName="node">
	        	<constant>1</constant>
	        </setHeader>
	  </route>

		<route id="countryByCode">
	  		<from uri="direct:countryByCode"/>
        <setBody>
          <header>countryCode</header>
        </setBody>
	      <setHeader headerName="operationNamespace">
	        <constant>http://www.oorsprong.org/websamples.countryinfo</constant>
	      </setHeader>
	      <setHeader headerName="operationName">
	        <constant>CountryName</constant>
	      </setHeader>
	      <to uri="cxf:bean:countryLookupClient"/>
	      <log message="${body}"/>
	      <setBody>
	        <simple>${body[0]}</simple>
	      </setBody>
      	  <process ref="countryResponseProcessor"/>
      	  <removeHeaders pattern="*"/>
	  </route>

  </camelContext>
</beans>
